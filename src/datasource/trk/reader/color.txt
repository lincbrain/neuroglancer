
vec3 colormapOrient(vec3 orient){
  vec3 result;
  result.r = abs(orient[0]);
  result.g = abs(orient[1]);
  result.b = abs(orient[2]);
  return clamp(result, 0.0, 1.0);
}


vec3 colormapHeat(float scalar) {
    // The scalar is already normalized to the 0 to 1 range
    float value = clamp(scalar, 0.0, 1.0); // Ensure value is clamped to 0-1 just in case

    // Define the colors for the gradient
    vec3 red = vec3(1.0, 0.0, 0.0);      // Red at the lower end (0)
    vec3 yellow = vec3(1.0, 1.0, 0.0);   // Yellow at the upper end (1)

    // Interpolate between red and yellow
    vec3 color = mix(red, yellow, value);

    return color;
}


#uicontrol bool heatmap checkbox(default=true)
#uicontrol bool orient_color checkbox(default=false)

void main() {
  if(orient_color){
	  emitRGB(colormapOrient(orientation));
  }
  else if (heatmap) {
      emitRGB(colormapHeat(FA)); // Use the colormapHeat function with normalized FA scalar
  } else {
      emitDefault(); // Default color if the heatmap is not enabled
  }
}

